/*** Logging Class* @class <b>idsLog</b> contains a JavaScript Loggin Extensions. Include this library and use the Log object in your script.<br/><br/><code>#include "Log.jsx"<br/>[...]<br/>_log = new Log(FILE, "DEBUG")<br/>_log.debug("Log me")</code><br/>* License: Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) http://creativecommons.org/licenses/by-sa/3.0/ <br>* <a href="http://www.indd-skript.de/download/idsHelper.jsx">original code</a>* @author Gregor Fellenz* @author Bastien Eichenberger (add some modifications)* @param {File} _logFile  The Logfile as File-Object.* @param {String} _logLevel One of the "OFF" "ERROR", "WARN", "INFO", "DEBUG", sets the current Logger to log only Events more or equal severe than the Loglevel.**/Lib.Log = function (my) {    // ------------------------------------------- private ---------------------------------------------------    var info_str = {en: "Info", fr: "Information"};    var warn_str = {en: "Warning", fr: "Avertissement"};    var error_str = {en: "Error", fr: "Erreur"};    var consult_log_file_str = {en: "for more informations read the log file", fr: "pour plus d'informations consultez le fichier log"};    var SEVERITY = [];    SEVERITY["OFF"] = 4;    SEVERITY["ERROR"] = 3;    SEVERITY["WARN"] = 2;    SEVERITY["INFO"] = 1;    SEVERITY["DEBUG"] = 0;    /**     * the log file     * @private logFile Object     * @type File     **/    var logFile = null;    /**     * the log level     * @private logLevel, the log level as Integer     * @type Integer     **/    var logLevel = null;    /**     * this function write a log with its serverity and its content in the log file     * @param {String} _message Message to log.     * @param {String} _severity the severity [DEBUG, INFO, WARN, ERROR, OFF]     **/    function writeLog(_message, _severity) {        logFile.open("e");        logFile.seek(logFile.length);        try {            logFile.writeln(Date() + " [" + _severity + "] " + ((_severity.length == 4) ? " [" : "[")  + app.activeScript.name + "] " + _message);        } catch (e) {            //We're running from ESTK            logFile.writeln(Date() + " [" + _severity + "] " + ((_severity.length == 4) ? " [" : "[")  + "ESTK] " + _message);        }        logFile.close();    };    // ------------------------------------------- public ---------------------------------------------------    my.init = function(log_dir, log_level) {        logFile = new File (log_dir + "/log.txt");        logLevel = log_level;    }    /**     * Writes a debug log message     * @param {String} _message Message to log.     */    my.debug = function(_message) {        if (logLevel <= 0)  writeLog(_message, "DEBUG");    };    /**     * Writes a info log message     * @param {String} _message Message to log.     */    my.info = function (_message) {        if (logLevel <= 1)  writeLog(_message, "INFO");    };    /**     * Writes a info message and alert the user     * @param {String} _message Message to log.     */    my.infoAlert = function (_message) {        if (logLevel <= 1){            writeLog(_message, "INFO");            alert (localize(info_str) + "\n" + _message + "\n\n" + localize(consult_log_file_str) + ":\n" + logFile);        }    };    /**     * Writes a warn log message     * @param {String} _message Message to log.     */    my.warn = function (_message) {        if (logLevel <= 2)  writeLog(_message, "WARN");    };    /**     * Writes a warn log message und displays an Alert-Window     * @param {String} _message Message to log.     */    my.warnAlert = function (_message) {        if (logLevel <= 2) {            writeLog(_message, "WARN");            alert (localize(warn_str) + "\n" + _message + "\n\n" + localize(consult_log_file_str) + ":\n" + logFile);        }    };    /**     * Writes a warn log message     * @param {String} _message Message to log.     */    my.error = function (_message) {        if (logLevel <= 3)  writeLog(_message, "ERROR");    };    /**     * Writes a error message and alert the user     * @param {String} _message Message to log.     */    my.errorAlert = function (_message) {        if (logLevel <= 3) {            writeLog(_message, "ERROR");            alert (localize(error_str) + "\n" + _message + "\n\n" + localize(consult_log_file_str) + ":\n" + logFile);        }    };    return my;}(Lib || {});function Log(_logFile, _logLevel) {}