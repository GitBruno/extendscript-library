/** * Module to dialog between the apps of the Creative Suite. <br> * This module allow you to execute a function in Photoshop from InDesign * @namespace Gateway * @memberOf H * @author Bastien Eichenberger */H.Gateway = (function (my) {    /**     * Function to execute a script in an other software of the Creative Suite     * @function call_app     * @memberOf H.Gateway     * @param {string} app the name of the application [photoshop, illustrator, indesign, … ]     * @param {function} function_to_execute the function to process     * @param {Array} args an array of arguments     * @param {Number} timeout the timeout in millisecond     * @returns {*} the value returned by the function passed as parameter or null     * @throws {Error} if an error occurred in the function passed as parameter or if the time exceeded without result     * @example     *     * With parameters     * H.Gateway.call_app(     *      'photoshop',     *      function(a, b) {     *          alert(a + b);     *      },     *      ['hello', 'world']     * );     *     * Without parameters     * H.Gateway.call_app(     *      'photoshop',     *      function() {     *          alert('function without parameter');     *      }     * );     */    my.call_app = function (app, function_to_execute, args, timeout) {        var error ;        var result;        var complete;        var bt = new BridgeTalk();        bt.target = app;        if (args) {            /**             * build a string representation of the function             *  (function hello(a, b)             *      my code;             *  }).apply(this, [])             */            bt.body = function_to_execute.toSource() + '.apply(this, ' +  args.toSource() +');';        }        else {            bt.body = function_to_execute.toSource() + '();';        }        bt.onError = function (ex) {            error = ex.body;        };        bt.onResult = function (response) {            result = response.body;            complete = true;        };        bt.send(timeout); // we have to wait the response of the other software        // if an error occured throw it        if (error) {            throw { name: 'Error', message: error };        }        // if the onResult function isn't complete, the timeout exceeded        if (!complete) {            throw { name: 'Timeout Error', message: 'exceeded timeout of ' +  timeout + ' seconds' };        }        // else return the result or null        return result || null;    }    return my;})(H.Gateway || {});