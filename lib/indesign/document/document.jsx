/** * Function who return true if one link is out of date * @name Document.check_out_of_date_link * @function * @return {Boolean} true if a link is out of date */Document.prototype.check_out_of_date_link = function() {    for(var i = 0; i < this.links.length; i++){        var current_link = this.links[i];        if(current_link.status === LinkStatus.LINK_OUT_OF_DATE){            return true;        }    }    return false;}/** * Function who return true if one link is missing * @name Document.check_is_missing_link * @function * @return {Boolean} true if a link is missing */Document.prototype.check_is_missing_link = function() {    for(var i = 0; i < this.links.length; i++){        var current_link = this.links[i];        if(current_link.status === LinkStatus.LINK_MISSING){            return true;        }    }    return false;}/** * Function who package a document and its links * @name Document.save_with_package * @function * @param {String} directories_path_str the path where to store the new document * @returns {String} the path of the new document * @throws {Error} if an error occurred during the package for print */Document.prototype.save_with_package = function(directories_path_str) {	var current_date = new Date();	var folder_package = new Folder(directories_path_str);	if (folder_package.exists === false) {        folder_package.create();    }	var doc_file = this.fullName;	var current_folder = new Folder(folder_package + "/" + current_date.year_month_day() + "_" + current_date.hours_minutes_seconds() + "__" + this.name);	current_folder.create();    /**     *  bool packageForPrint (to: File, copyingFonts: bool, copyingLinkedGraphics: bool, copyingProfiles: bool, updatingGraphics: bool,     *  includingHiddenLayers: bool, ignorePreflightErrors: bool, creatingReport: bool[, versionComments: string][, forceSave: bool=false])     **/    var result_package = this.packageForPrint(current_folder, false, true, false, true, false, true, false);    if(!result_package){        throw new Error("il y a eu un problème lors de l'assemblage");    }    return current_folder + "/" + this.name;}/** * Function to check if the same file is used many times (image, PDF) * @name Document.is_link_used_many_time * @function * @param {Link} link_item the link item * @return {Number} The number of time that the link is used */Document.prototype.is_link_used_many_time = function(link_item){    var array_all_links = this.links;    var counter = 0;    for(var i = 0; i < array_all_links.length; i++){        var current_link = array_all_links[i];        if(link_item.filePath === current_link.filePath){            counter++;        }    }    return counter;}