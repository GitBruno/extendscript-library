/** * This script allow you to crop all pictures of an InDesign Document * All images are cropped with the same dimensions of the indesign block * These images are set to 100% in the layout, the resize is done without resampling * All modification are done on a new document save on the desktop crop/timestamp/document * @author Bastien Eichenberger * @requires {@link IN} * @requires {@link PS} * @throws {Error} if a link is used more than 1 times * @throws {Error} if a link is not proportional *///@target "indesign"//@include "../../lib/indesign/indesign-lib.jsx"try {    IN.Config.init();    /**     * The script folder     * @type {Folder}     */    var SCRIPT_FOLDER = new File($.fileName).parent;    /**     * The log folder     * @type {Folder}     */    var LOG_FOLDER = new Folder(SCRIPT_FOLDER + '/log');    /**     * The result folder path     * @type {string}     */    var SAVE_FOLDER_PATH = '~/Desktop/crop';    H.Log.init(LOG_FOLDER, 0);    // make a package, then all modification are done on the new document    var doc = app.activeDocument;    var new_doc_path = IN.Document.save_with_package(doc, SAVE_FOLDER_PATH);    var new_doc = app.open(new File(new_doc_path));    doc.close(SaveOptions.NO);    var links_collection = new_doc.links;    for (var i = 0; i < links_collection.length; i++) {        var current_link = links_collection[i];        if (is_link_valid(current_link, new_doc)) {            // link is [EPS, Image, ImportedPage | PDF | PICT | WMF]            // link.parent = graphic            // graphic.parent = PageItem            var page_item = current_link.parent.parent;            var graphic = current_link.parent;            // get the resolution            var resolution = graphic.effectivePpi[0];            // The bounds of the Graphic excluding the stroke width, in the format [y1, x1, y2, x2], which give the coordinates of the top-left and bottom-right corners of the bounding box.            var top_left_corner = {};            top_left_corner.x = page_item.geometricBounds[1] - graphic.geometricBounds[1];            top_left_corner.y = page_item.geometricBounds[0] - graphic.geometricBounds[0];            // The bounds of the Graphic excluding the stroke width, in the format [y1, x1, y2, x2], which give the coordinates of the top-left and bottom-right corners of the bounding box.            var bottom_right_corner = {};            bottom_right_corner.x = top_left_corner.x + (page_item.geometricBounds[3] - page_item.geometricBounds[1]);            bottom_right_corner.y = top_left_corner.y + (page_item.geometricBounds[2] - page_item.geometricBounds[0]);            // crop this link            H.Gateway.call_app(                'photoshop',                crop_in_photoshop,                [SCRIPT_FOLDER, current_link.filePath, top_left_corner, bottom_right_corner, graphic.absoluteHorizontalScale, graphic.absoluteVerticalScale, resolution, 'ResampleMethod.NONE'],                100            );            set_proportional_link_to_100(current_link);            H.Log.info('the link ' + current_link.name + 'was correctly cropped');        }    }    new_doc.save();    alert('The script is finished');}catch (ex) {    H.Log.errorAlert(            'file: ' + ex.fileName +            '\n name: ' + ex.name +            '\n message: ' + ex.message +            '\n line: ' + ex.line    );}finally {    IN.Application.restore();}/** * Function to check if a link is valid, only [TIFF, JPEG, PNG, PSD] are edited * @param {Link} link_item * @param {Document} new_doc * @returns {boolean} true if the link is valid * @throws {Error} if a link is used more than 1 times * @throws {Error} if a link is not proportional */function is_link_valid (link_item, new_doc) {    // check if a link is used more than 1 times    if (IN.Link.count(link_item, new_doc) > 1) {        throw {            name: 'Error',            message: 'A link cannot been used more than 1 times',            fileName: $.fileName,            line: $.line        };    }    // check if a link is not proportional    if (!IN.Link.is_proportional(link_item)) {        throw {            name: 'Error',            message: 'A link is not proportional',            fileName: $.fileName,            line: $.line        };    }    // only TIFF, JPEG, PNG AND PSD are edited    if (link_item.linkType === 'TIFF' || link_item.linkType === 'JPEG'        || link_item.linkType === 'Portable Network Graphics (PNG)' || link_item.linkType === 'Photoshop') {        return true;    }    return false;}/** * Function to crop an image in Photoshop * @param file_path * @param top_left_corner * @param bottom_right_corner * @param horizontal_scale * @param vertical_scale * @param resolution * @param resample_method * @requires {@link PS} */function crop_in_photoshop (SCRIPT_FOLDER, file_path, top_left_corner, bottom_right_corner, horizontal_scale, vertical_scale, resolution, resample_method) {    $.evalFile(SCRIPT_FOLDER + "/../lib/photoshop/photoshop-lib.jsx");    try {        PS.Config.init();        PS.Application.open(file_path);        var ps_doc = app.activeDocument;        PS.Document.Resize.resampling(ps_doc, file_path, horizontal_scale, vertical_scale, resolution, resample_method);        bounds = [top_left_corner.x, top_left_corner.y, bottom_right_corner.x, bottom_right_corner.y];        ps_doc.crop(bounds);        ps_doc.save();        ps_doc.close();    }    catch (ex) {        throw {            name: 'Error',            message: ex.message,            fileName: $.fileName,            lineNumber: $.line        };    }    finally{        PS.Application.restore();    }}/** * Function to set a link to 100% in indesign and put the x y coordinates to 0,0 * @param link_item */function set_proportional_link_to_100 (link_item) {    var status = link_item.status;    if (status === LinkStatus.LINK_OUT_OF_DATE) {        link_item.update();    }    if (link_item.status != LinkStatus.NORMAL) {        throw {            name: 'Error',            message: 'The link ' + link_item.name + ' as an wrong status',            fileName: $.fileName,            line: $.line        };    }    var graphic = link_item.parent;    var page_item = current_link.parent.parent;    // [y1, x1, y2, x2], get the x,y coordinate of the block then put the graphic to 0,0    var x = page_item.geometricBounds[1];    var y = page_item.geometricBounds[0];    graphic.move([x, y]);    // set to 100%    graphic.absoluteHorizontalScale = 100;    graphic.absoluteVerticalScale = 100;}