#include "Tools.jsx"#include "Picture_tools.jsx"/** * Dialog_box class* @class Dialog_box class to display the script UI </br>* <code>*   results.cibleBitmap*   results.cibleRaster;*   results.limitBitmap;*   results.limitRaster;*   results.isPictureProp*   results.isSousEchantillonnage)*   results.isSurEchantillonnage)* </code> * @author Bastien Eichenberger * @version 1.0 * @date 10.09.2013 * @requires Tools * @requires Picture_tools **/function Dialog_box() {    var myArray = [];    var myListBoxBounds = [0, 0, 500, 200];    var myListMargins = [10, 10, 0, 0];    // window    var win = new Window("dialog", "réduction d'images");    win.orientation = "column";    win.alignChildren = "top";    // ignored img panel     var ignored_pan = win.add("panel", undefined, "images ignorées");    var grp_ignored = ignored_pan.add("group");    grp_ignored.orientation = "column";    grp_ignored.helpTip = "ajouté une image si vous ne souhaitez pas qu'elle soit prise en compte par ce script";    grp_ignored.listBox = grp_ignored.add("listbox", undefined, myArray, {multiselect: true});    grp_ignored.listBox.bounds = myListBoxBounds;    grp_ignored.margins = myListMargins;    // group button    var ignored_pan_button = ignored_pan.add("group");    ignored_pan_button.orientation = "row";    ignored_pan_button.addBtn = ignored_pan_button.add("button", undefined, "ajouter image");    ignored_pan_button.addBtn.helpTip = "ajouter une image à la liste";    ignored_pan_button.removeBtn = ignored_pan_button.add("button", undefined, "supprimer image");    ignored_pan_button.removeBtn.helpTip = "supprimer l'image sélectionnée de la liste";    ignored_pan_button.remAllBtn = ignored_pan_button.add("button", undefined, "supprimer toutes");    ignored_pan_button.remAllBtn.helpTip = "supprimer toutes les images de la liste";    // settings panel    var setting_pan = win.add("panel", undefined, "réglages");    setting_pan.orientation = "column";    setting_pan.minimumSize = [500, 0];    //group cible and prop    var grp_cible_prop = setting_pan.add("group");    grp_cible_prop.orientation = "row";    grp_cible_prop.alignment = "left";    //group cible bitmap, cible raster    var grp_bitmap_raster = grp_cible_prop.add("group");    grp_bitmap_raster.orientation = "column";    grp_bitmap_raster.minimumSize = [250, 0];    //group bitmap cible    var cible_bitmap_pan = grp_bitmap_raster.add("group");    cible_bitmap_pan.orientation = "row";    cible_bitmap_pan.alignment = "left";    cible_bitmap_pan.labelCibleBitmap = cible_bitmap_pan.add("statictext", undefined, "cible image bitmap");    cible_bitmap_pan.cibleBitmap = cible_bitmap_pan.add("edittext", undefined, "1200");    cible_bitmap_pan.cibleBitmap.minimumSize = [60, 0];    cible_bitmap_pan.cibleUnitBitmap = cible_bitmap_pan.add("statictext", undefined, "dpi");    //group raster cible    var cible_raster_pan = grp_bitmap_raster.add("group");    cible_raster_pan.alignment = "left"    cible_raster_pan.orientation = "row";    cible_raster_pan.labelCibleRaster = cible_raster_pan.add("statictext", undefined, "cible image pixelisée");    cible_raster_pan.cibleRaster = cible_raster_pan.add("edittext", undefined, "300");    cible_raster_pan.cibleRaster.minimumSize = [50, 10];    cible_raster_pan.cibleUnitRaster = cible_raster_pan.add("statictext", undefined, "dpi");    // group proportionnelle    var prop_pan = grp_cible_prop.add("panel", undefined, "images non-proportionnelles");    prop_pan.alignChildren = "left";    prop_pan.minimumSize = [200, 0];    prop_pan.rad1 = prop_pan.add("radiobutton", undefined, "autorisées");    prop_pan.rad2 = prop_pan.add("radiobutton", undefined, "interdites");    prop_pan.rad2.value = true;    // group ss echantillonnnage and ss echantillonnage -> group echantillonnage    var grp_echantillonnage = setting_pan.add("group");    grp_echantillonnage.orientation = "row";        // column left    var grp_column_left = grp_echantillonnage.add("group");    grp_column_left.orientation = "column";    grp_column_left.alignChildren = "left";    // group duplicated links panel    var duplicated_links_pan = grp_column_left.add("panel", undefined, "séparer les liens multiples");    var grp_duplicated_links = duplicated_links_pan.add("group");    grp_duplicated_links.orientation = "column";    grp_duplicated_links.alignChildren = "left";    grp_duplicated_links.alignment = "left";    duplicated_links_pan.rad1 = grp_duplicated_links.add("radiobutton", undefined, "activé");    duplicated_links_pan.rad1.value = true;    duplicated_links_pan.rad2 = grp_duplicated_links.add("radiobutton", undefined, "désactivé");      // panel ss_echantillonnage    var ss_echantillonnage_pan = grp_column_left.add("panel", undefined, "sous-échantillonnage");    // ss_echantillonnage_pan.minimumSize = [75, 140];    // group ss_echantillonnage    var grp_ss_echantillonnage = ss_echantillonnage_pan.add("group");    grp_ss_echantillonnage.alignChildren = "left";    grp_ss_echantillonnage.orientation = "column";    grp_ss_echantillonnage.alignment = "left";    //grp_ss_echantillonnage.margins = [0, 25, 0, 0];    ss_echantillonnage_pan.rad1 = grp_ss_echantillonnage.add("radiobutton", undefined, "activé");    ss_echantillonnage_pan.rad1.value = true;    ss_echantillonnage_pan.rad2 = grp_ss_echantillonnage.add("radiobutton", undefined, "désactivé");    // group sur-echantillonnage    var sur_echantillonnage_pan = grp_echantillonnage.add("panel", undefined, "sur-échantillonnage");    sur_echantillonnage_pan.alignChildren = "left";    sur_echantillonnage_pan.rad1 = sur_echantillonnage_pan.add("radiobutton", undefined, "activé");    sur_echantillonnage_pan.rad1.value = true;    sur_echantillonnage_pan.rad2 = sur_echantillonnage_pan.add("radiobutton", undefined, "désactivé");    // group limite bitmap    var limite_bitmap_pan = sur_echantillonnage_pan.add("group");    limite_bitmap_pan.orientation = "row";    limite_bitmap_pan.labelBitmap = limite_bitmap_pan.add("statictext", undefined, "résolution min. image bitmap");    limite_bitmap_pan.limitBitmap = limite_bitmap_pan.add("edittext", undefined, "1000");    limite_bitmap_pan.limitUnitBitmap = limite_bitmap_pan.add("statictext", undefined, "dpi");    // group limit raster    var limite_raster_pan = sur_echantillonnage_pan.add("group");    limite_raster_pan.labelRaster = limite_raster_pan.add("statictext", undefined, "résolution min. image pixelisée");    limite_raster_pan.limitRaster = limite_raster_pan.add("edittext", undefined, "200");    limite_raster_pan.limitUnitRaster = limite_raster_pan.add("statictext", undefined, "dpi");    // ----------------------- navigation ------------------------------    var grp_navigation = win.add("group");    grp_navigation.orientation = "row";    grp_navigation.alignment = "right";    grp_navigation.cancelBtn = grp_navigation.add("button", undefined, "annuler", {name: "cancel"});    grp_navigation.okBtn = grp_navigation.add("button", undefined, "lancer le script", {name: "ok"});    //-------------------------- private functions ----------------------------        cible_bitmap_pan.cibleBitmap.onChange = function() {        is_textfield_valid(this, "1200", "vous devez saisir un nombre entier");    }    cible_raster_pan.cibleRaster.onChange = function() {        is_textfield_valid(this, "300", "vous devez saisir un nombre entier");    }    limite_bitmap_pan.limitBitmap.onChange = function() {        is_textfield_valid(this, "1000", "vous devez saisir un nombre entier")    }    limite_raster_pan.limitRaster.onChange = function() {        is_textfield_valid(this, "200", "vous devez saisir un nombre entier");    }        /**     * function to check if a text field content an Integer and if the Integer is > 1     * @param {Edittext Object} object the field to check     * @param {Integer} default_value_number the default value to restore if the value wasn't correct     * @param {String} alerrt_str the value to display in UI     **/    function is_textfield_valid(object, default_value_number, alert_str) {        if (!isInt(object.text)) {            alert(alert_str);            object.text = default_value_number;        }        if (parseInt(object.text) < 1) {            alert("vous devez saisir un nombre plus grand ou égal a 1");            object.text = default_value_number;        }    }    /**     * function to check if a number is an Integer (the float aren't allowed)     * @param {Float} n the number to check     * @return {Boolean} true if the number is an Integer without point number     **/    function isInt(n) {        return parseFloat(n) == parseInt(n, 10) && !isNaN(n);    }        //the user can only add tif psd png jpg eps file without spaces in file name    ignored_pan_button.addBtn.onClick = function() {        var array_of_files = File.openDialog("sélectionner une image ou plusieurs images", get_file_filter([".tif", ".psd", ".png", ".jpg", ".eps"], "choisir une image"), true);        if (array_of_files != null) {            for (var index = 0; index < array_of_files.length; index++) {                var file_decode_name = File.decode(array_of_files[index].name);                                if (! (Tools.is_in_array(file_decode_name, myArray)) ) {                                        var file_path = array_of_files[index].fsName;                    var file_path_lower = file_path.toLowerCase();                    var extension = file_path_lower.slice(file_path_lower.lastIndexOf("."));                    if (! (Tools.contains_special_char(file_decode_name)) ) {                        if (extension == ".eps") {                            var eps_img = new File(file_path);                            if (Picture_tools.is_raster_eps(eps_img)) {                                myArray.push(file_decode_name);                            }                            else {                                alert("seul les fichiers eps de type image (non-vectorielle) peuvent être ajoutés");                            }                        }                        else {                            myArray.push(file_decode_name);                        }                    }                    else {                        alert("seul les fichiers sans caractères spéciaux peuvent être ajoutés");                    }                }                else {                    alert("cette image a déjà été ajoutée");                }            }            grp_ignored.remove(grp_ignored.listBox);            grp_ignored.listBox = grp_ignored.add('listbox', myListBoxBounds, myArray, {multiselect: true});            grp_ignored.listBox.bounds = myListBoxBounds;            grp_ignored.margins = myListMargins;        }    }    ignored_pan_button.remAllBtn.onClick = function() {        grp_ignored.listBox.removeAll();        myArray = [];    }    ignored_pan_button.removeBtn.onClick = function() {        if (grp_ignored.listBox.selection != null) {            for (var i = grp_ignored.listBox.selection.length - 1; i >= 0; i--) {                myArray.splice(grp_ignored.listBox.selection[i].index, 1);                grp_ignored.listBox.remove(grp_ignored.listBox.selection[i]);            }        }        else {            alert("selectionner une image puis clicker sur le bouton supprimer image");        }    }    /**      * this function get a file filter function for mac os x      * @param {Array} array_of_ext an array of extension as String      * @param {String} prompt_str the prompt String alert to display      **/    function get_file_filter(array_of_ext, prompt_str) {        function return_filter(file) {            var is_valid = false;            var index = 0;            while (!is_valid) {                while (file.alias) {                    file = file.resolve();                    if (file == null) {                        is_valid = false                    }                }                if (file.constructor.name == "Folder") {                    is_valid = true;                }                else {                    var extension = file.name.toLowerCase().slice(file.name.lastIndexOf("."));                    if (extension.indexOf(array_of_ext[index]) > -1) {                        is_valid = true;                    }                }                index++;                if (index >= array_of_ext.length) {                    break;                }            }            return is_valid;        }        return return_filter;    }        //-------------------------- publics functions ----------------------------      /**     * function to show the user dialog box     * @return {Object} results a JSON Object      * <code>    *   results.cibleBitmap    *   results.cibleRaster;    *   results.limitBitmap;    *   results.limitRaster;    *   results.isPictureProp    *   results.isSousEchantillonnage)    *   results.isSurEchantillonnage)    * </code>or null if the user canceled the script    **/    this.show = function() {        //-------------------------- return values ----------------------------        var results = {};        // if show == 1 the user click run        if (win.show() == 1) {            // is the picture prop check or not            if (prop_pan.rad1.value) {                results.isPictureNotPropAllowed = true;            }            else {                results.isPictureNotPropAllowed = false;            }            // is the sous echantillonnage check            if (ss_echantillonnage_pan.rad1.value) {                results.isSousEchantillonnage = true;            }            else {                results.isSousEchantillonnage = false;            }            // is the sur echantillonnage check            if (sur_echantillonnage_pan.rad1.value) {                results.isSurEchantillonnage = true;            }            else {                results.isSurEchantillonnage = false;            }            // is split duplicated links actived            if(duplicated_links_pan.rad1.value){                results.split_duplicated_links = true;            }            else{                results.split_duplicated_links = false;            }            // return the target value, the validation is done during onChange event            results.cibleBitmap = parseInt(cible_bitmap_pan.cibleBitmap.text);            results.cibleRaster = parseInt(cible_raster_pan.cibleRaster.text);            results.limitBitmap = parseInt(limite_bitmap_pan.limitBitmap.text);            results.limitRaster = parseInt(limite_raster_pan.limitRaster.text);            results.array_of_ignored_picture = myArray;        }        //else the script was canceled        else {            results = null;        }        return results;    }}