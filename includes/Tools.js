Tools.foï»¿/*** Tools class* @class <b>Tools</b> a class who provide usefull method* @author Bastien Eichenberger**/function Tools(){    }/** * function who format a date * @param {Date} _date the date object * @return Date format yyyy-mm-dd */Tools.format_date = function format_date (_date) {    ///	<summary>		///		This method is internal.		///	</summary>		///	<private />    var _year = _date.getFullYear();    var _month = _date.getMonth() + 1;    if (_month.toString().length == 1) _month = "0" +_month;    var _day = _date.getDate();    if (_day.toString().length == 1) _day = "0" +_day;    return _year + "-" + _month + "-" + _day;}/** * function who format time * @param {Date} _date the date object * @return Date time hh-mm-ss */Tools.format_time = function format_time (_date) {    var _hours = _date.getHours();    if (_hours.toString().length == 1) _hours= "0" +_hours;    var _minutes = _date.getMinutes();    if (_minutes.toString().length == 1) _minutes= "0" +_minutes;    var _seconds = _date.getSeconds();    if (_seconds.toString().length == 1) _seconds = "0" +_seconds;     return _hours + "-" + _minutes + "-" + _seconds;}/** * function who check if a String is in array * @param {String} the string to find * @param {Array} the array to parse * @return {Boolean} is_in_array true if the string is in array */Tools.is_in_array = function is_in_array(myString, myArray) {    for (x in myArray) {        if (myString == myArray[x]) {            return true;        }    }    return false;}/** * function who check if a string contains special char [!@#$%^&*()+=-[]\\\';,/{}|\":<>? " normal space] * @param {String} myStringID the string to parse * @return {Boolean} contains_char true if the string contains special char */Tools.contains_special_char = function contains_special_char(myStringID){     var contains_char = false;     var illegalChars = "!@#$%^&*()+=-[]\\\';,/{}|\":<>? ";      for (var i = 0; i < myStringID.length; i++){        if (illegalChars.indexOf(myStringID.charAt(i)) != -1) {            contains_char = true;            break;        }     }     return contains_char;}/** * function who remplace all char in a string * @param {String} find the char to find * @param {String} replace the new char * @param {String} str the string to parse * @return {String} new_str the new string */Tools.replaceAll = function replaceAll(find, replace, str) {  return str.replace(new RegExp(find, 'g'), replace);}/** * function to return the lower number in an array * @param {Array of Number} array the array of element to parse * @return {Double} lower_element the lower element */Tools.get_lower_element = function(array){    var lower_element = array[0];    for(var i = 0; i<array.length; i++){        if(lower_element > array[i]){            lower_element = array[i]        }    }    return lower_element;}