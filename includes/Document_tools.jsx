#include "Tools.jsx"/*** Document_tools class* @class <b>Document_tools</b> a class to deal with images. Contains static methods* @author Bastien Eichenberger* @requires Tools class* @requires Photoshop_library**/function Document_tools(){}/** * function who return true if one link is out of date * @param {Indesign Document} doc the indesign document * @return {Boolean} link_statut true if a link is out of date, then false **/Document_tools.check_outOfDate_link = function(doc) {    var link_statut = false;    for(var i = 0; i<doc.links.length; i++){        var current_link = doc.links[i];        if(current_link.status == LinkStatus.LINK_OUT_OF_DATE){            link_statut = true;        }    }    return link_statut;}/** * function who return true if one link is missing * @return {Boolean} link_statut true, if a link is missing then false **/Document_tools.check_is_missing_link = function(doc) {    var link_statut = false;    for(var i = 0; i<doc.links.length; i++){        var current_link = doc.links[i];        if(current_link.status == LinkStatus.LINK_MISSING){            link_statut = true;        }    }    return link_statut;}/** * function who package a document and his link * @param {Indesign Document} doc the doc to package * @param {String} directories_path_str the path where to store the new document * @return {String} new_doc_file the new doc path * @throw {Error} if the package function occured an error **/Document_tools.save_with_package = function(doc, directories_path_str) {    var result_package = false;	var current_date = new Date();	var folder_package = Folder (directories_path_str);	if (folder_package.exists == false) {        folder_package.create();    }	var doc_file = doc.fullName;	var current_folder = Folder (folder_package + "/" + Tools.format_date(current_date) + "_" + Tools.format_time(current_date) + "__" + doc.name);	current_folder.create();    /**bool packageForPrint (to: File, copyingFonts: bool, copyingLinkedGraphics: bool, copyingProfiles: bool, updatingGraphics: bool,       *  includingHiddenLayers: bool, ignorePreflightErrors: bool, creatingReport: bool[, versionComments: string][, forceSave: bool=false])      **/    result_package = doc.packageForPrint(current_folder, false, true, false, true, false, true, false);    if(!result_package){        throw new Error("il y a eu un problème lors de l'assemblage");    }    return current_folder + "/" + doc.name;}/** * function who check if the same imported file is used many time (image, PDF) * @param {Link} link_item the link item * @param {Indesign Document} doc_to_check the indesign document to check * @return {Integer} counter The number of times the link is used **/Document_tools.is_link_used_many_time = function(link_item, doc_to_check){    var array_all_links = doc_to_check.links;    var counter = 0;    for(var i = 0; i<array_all_links.length; i++){        var current_link = array_all_links[i];        if(link_item.filePath == current_link.filePath){            counter++;        }    }    return counter;}/** * function who check if a link is proportionnal or not * @param {Link} link_item the link item * @return {Boolean} is_prop true if the link is proportionnal **/Document_tools.is_link_proportionnal = function(link_item){    var is_prop;    var myImage = link_item.parent;    var myHorScale = Math.abs(myImage.absoluteHorizontalScale);    var myVerScale = Math.abs(myImage.absoluteVerticalScale);    if(Math.round(myHorScale) == Math.round(myVerScale) ){        is_prop = true;    }    else{        is_prop = false;    }    return is_prop;}/** * function to get the filepath from a link item * @param {Link} link_item the link item * @return {String} my_path the filepath of the element in the link item **/Document_tools.get_file_path_from_link = function(link_item){    var file_object = new File(link_item.filePath);    var my_path = file_object.fsName;    return my_path;}